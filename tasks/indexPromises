

// const getDataFromServer = (url) => {
//     return new Promise((res, rej) => {
//         if (!url.startsWith('http')) {
//             rej('Invalid url')
//         } else {
//             setTimeout(() => {
//                 res([{ name: 'Alex' }])
//             }, 1000)
//         }
//     })
// }


// const getData = () => {
//     getDataFromServer("http:/api.com/users")
//         .then(users => {
//             return getDataFromServer("http:/api.com/users/2")
//         })
//         .then(user => {
//             return getDataFromServer("http:/api.com/users/2/books")
//         })
//         .then(books => {
//             return getDataFromServer("http:/api.com/users/2/books/10")
//         })
//         .then(book => {
//             return getDataFromServer("http:/api.com/users/2/books/pages/10")
//         })
//         .catch((err) => {
//             console.log(err)
//         })
// }

// const getDataAsync = async () => {
//     try {

//         const users = await getDataFromServer("http:/api.com/users")

//         const user = await getDataFromServer("http:/api.com/users/2/books")

//         const books = await getDataFromServer("http:/api.com/users/2/books")

//         const book = await getDataFromServer("http:/api.com/users/2/books/1")

//         return 10

//     } catch (e) {

//         console.log(e)

//     } finally {

//     }
// }

// const test = getDataAsync()

// test.then((ten) => { })














// getDataFromServer("http:/api.com/users", (err, data) => {
//     if (err) {
//         throw new Error(err)
//     } else {
//         console.log('Response from server: ', data)
//         getDataFromServer("http:/api.com/users/2", (err, data) => {
//             if (err) {
//                 throw new Error(err)
//             } else {
//                 console.log('Response from server: ', data)
//                 getDataFromServer("http:/api.com/users/2/books", (err, data) => {
//                     if (err) {
//                         throw new Error(err)
//                     } else {
//                         console.log('Response from server: ', data)
//                         getDataFromServer("http:/api.com/users/2/books/123", (err, data) => {
//                             if (err) {
//                                 throw new Error(err)
//                             } else {
//                                 console.log('Response from server: ', data)
//                                 getDataFromServer("http:/api.com/users/2/books/123/pages/12", (err, data) => {
//                                     if (err) {
//                                         throw new Error(err)
//                                     } else {
//                                         console.log('Response from server: ', data)
//                                     }
//                                 })
//                             }
//                         })
//                     }
//                 })
//             }
//         })
//     }
// })


// const promise1 = new Promise((resolve, reject) => {
//     setTimeout(resolve, 2000, 'foo');
// });

// const promise2 = new Promise((resolve, reject) => {
//     setTimeout(reject, 1000, 'foo');
// });

// Promise.all([promise1, promise2])
//     .then((values) => {
//         console.log(values);
//     })
//     .catch(err => {
//         console.log(err)
//     })

// Promise.allSettled([promise1, promise2])
//     .then((values) => {
//         console.log(values);
//     })
//     .catch(err => {
//         console.log(err)
//     })

// Promise.race([promise1, promise2])
//     .then((values) => {
//         console.log(values);
//     })
//     .catch(err => {
//         console.log(err)
//     })

// const p = Promise.reject("Error")

// const p1 = Promise.resolve("Some")


// function fetch() {
//     return new Promise(resolve => {
//         resolve('some data')
//     });
// }

// fetch()
//     .then(result => { return `${result} and one` })
//     .then(result => { return `${result} and two` })
//     .then(result => { throw new Error(`${result} has error`) })
//     .then(result => console.log(result))
//     .then(error => console.log(error))
//     .finally(() => { })
